#!/usr/bin/env lua

-- Code Guide

-- Example comment below:
-- guide: Login 1. Start login process

-- Usage example, open Neovim with populated quickfix list:
-- nvim -q $(cg guide:)

local uniqueString = arg[1]

local command = "rg --vimgrep " .. uniqueString
local file = io.popen(command)
local output = file:read("*a")
file:close()

local data = {}

for row in output:gmatch("[^\r\n]+") do
    local filename, line, column, type, order, description = row:match("(%S+):(%d+):(%d+).+" .. uniqueString .."%s+(%w+)%s+(%d+).%s+(.+)")

    if filename and line and column and type and order and description then
        if not data[type] then
            data[type] = {}
        end

        table.insert(data[type], {row, filename, line, column, type, order, description})
    end
end

function trim(s)
   return (s:gsub("^%s*(.-)%s*$", "%1"))
end

local types = ""
for type in pairs(data) do
    types = types .. type .. "\n"
end

local tempFileName = os.tmpname()
local tempFile = io.open(tempFileName, "w")
tempFile:write(types)
tempFile:close()

local command = "cat " .. tempFileName .. " | fzf"
local pipe = io.popen(command, "r")
local pickedType = pipe:read("*a")
pickedType = trim(pickedType)


table.sort(data[pickedType], function(a, b) return a[6] < b[6] end)

local quickfix = ""
for i, row in pairs(data[pickedType]) do
    quickfix = quickfix .. row[1] .. "\n"
end

local tempQuickfixFileName = os.tmpname()
local tempQuickfix = io.open(tempQuickfixFileName, "w")
tempQuickfix:write(quickfix)
tempQuickfix:close()

-- Print temp file name with quickfix entries
print(tempQuickfixFileName)
