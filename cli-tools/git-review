#!/usr/bin/env bash

set -euo pipefail

RED='\033[0;31m'
NC='\033[0m' # No Color

# TODO: What about moved files? They appear as deleted right now
# TODO: Use some other suffix than -review?

branch=$1
targetBranch=${2:-}

if [ -z "${branch}" ]; then
    echo "Branch is missing"
    exit 1
fi

if [ -z "${targetBranch}" ]; then
  # So that we can get main/master automatically: https://stackoverflow.com/a/17100946
  git remote set-head origin -a
  targetBranch="$(git main-branch)"
fi

if [ "$(git status --porcelain)" ]; then
	echo "You already have changes"
	exit 1
fi

echo "Target branch: $targetBranch"
git checkout "$targetBranch"

# Create a version of the target branch so that we don't have to reset it
echo "Creating review version of target branch"
git branch -C "$targetBranch" "$targetBranch-review"
git checkout "$targetBranch-review"
git pull

# Because we might not have it locally
echo "Pulling branch to review"
git checkout "$branch"
git pull

# Use target branch to create a review branch
git checkout -b "$branch-review" "$targetBranch-review"

# Merge without commit
git merge origin/"$branch" --no-commit --no-ff

# Unstage changes
git reset

# Show deleted files as diff
# git diff --diff-filter=D | less -RFX
# git difftool --diff-filter=D
# t=$(git ls-files --deleted | fzf --preview="git show :{}")
deletedFiles=$(git ls-files --deleted)
if [ -n "${deletedFiles}" ]; then
  echo ""
  echo -e "${RED}Deleted files${NC}"
  echo "$deletedFiles"
  read -p "Press any key" -n 1 -r
fi

# Open editor with populated quickfix
trap 'rm -f "$tmp"' 0 1 2 3 15
tmp=`mktemp -t git-review.XXXXXX` || exit 1

# Exclude deleted files from "list-changes"
git list-changes | grep -v /dev/null:0: > "$tmp"
test -s "$tmp" || exit 0
editor=`git var GIT_EDITOR`
eval "$editor -q $tmp"
